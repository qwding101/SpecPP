use_r("ancillary")
use_mit_license()
use_r("visual")
?export
use_package("ggplot2","dplyr")
use_package(c("ggplot2","dplyr"))
?use_package
use_package("dplyr", "ggplot2")
use_package("dplyr")
use_package("ggplot2")
use_package("cowplot")
use_package("stats")
??dist
use_r("estimator")
use_package("spatstat")
?as.function
?re
?Re
?detectCores
use_package("parallel")
?detectCores
?makeCluster
?registerDoParallel
use_package("doParallel")
?foreach
use_package("foreach")
?stopCluster
?as.formula
?predict
?area
?as.im
?density.ppp
?integral.im
?marks
?owin
?ppm
?shift
?unmark
use_package("spatstat.geom")
?unmark
use_package("spatstat.explore")
?area
?shift
?ppm
use_package("spatstat.model")
use_r("bandwidth")
?marks
?xtabs
?attr
?detectCores
?registerDoParallel
?stopCluster
?parRapply
?clusterExport
?detectCores
?which.min
use_r("estimator_sim")
?shift
?split
?split.spp
spatstat::split
spatstat::split.spp
spatstat::split.ppp
?ppm
?I
?area
?marks
?Sys.info
?detectCores
?parLapply
?stopCluster
?mclapply
?marks
?registerDoParallel
?integrate
?clusterEvalQ
use_r("bandwidth_sim")
?marks
library(spatstat)
rpois(1,10)
rpoispp(4)
rpoispp(10)
is.multitype(rpoispp(10))
?is.multitype
test=rpoispp(10)
marks(test)
marks(test)=1
marks(test)
is.multitype(test)
test
!is.multitype(test)
!spatstat.geom::is.multitype(test)
?use_pipe()
use_pipe()
?aes
?element_text
?guides
?marks
?ppm
?split
?split.ppp
?formula
?lm
lm
?ppm
?match
formula
?data.frame
?ppm
?mutate
?ggplot
?theme
?ppm
?split.ppp
?ppp
load_all()
library(spatstat)
?rmpoispp
?square
?ppm
?mutate
lam <- function(x, y, m) {(x^2 + y) * ifelse(m == "A", 2, 1)}
ppp <- rmpoispp(lambda = lam, win = square(10), types = c("A","B"))
periodogram(i = "A", j = "A", ppp)
periodogram(i = "A", j = "A", ppp, return.DFT = T)
?pmm
?ppm
use_package("spatstat")
?periodogram
?periodogram
?mutate
?periodogram
?periodogram
?periodogram
?periodogram_smooth
?periodogram_smooth
?periodogram
?periodogram_smooth
?periodogram
?periodogram_smooth
?periodogram
load_all()
?periodogram_smooth
?periodogram
?mutate
?periodogram_smooth
?periodogram_
?periodogram
?periodogram
?periodogram
use_package(spatstat)
use_package("spatstat")
?periodogram
?ppm
?periodogram
?periodogram
?periodogram
100^(-1/6)
?periodogram
test = rmpoispp(lambda = lam, win = square(10), types = c("A","B"))
test
periodogram_smooth(test, inten.formula = "~ x + y", bandwidth = 0.45)
library(doParallel)
periodogram_smooth(test, inten.formula = "~ x + y", bandwidth = 0.45)
load_all()
periodogram_smooth(test, inten.formula = "~ x + y", bandwidth = 0.45)
generate_freq
periodogram(i = "A", j = "B", test, inten.formula = "~ x + y")
warnings()
?generate_freq
periodogram_smooth(test, inten.formula = "~ x + y", bandwidth = 0.45)
generate_freq
lam <- function(x, y, m) {(x^2 + y) * ifelse(m == "A", 2, 1)}
ppp <- rmpoispp(lambda = lam, win = square(10), types = c("A","B"))
periodogram_smooth
load_all()
periodogram_smooth
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.45)
load_all()
periodogram_smooth
generate_freq()
generate_freq
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.45)
generate_freq()
generate_freq
?foreach
?load_all
!is.null(NULL)
?expand.grid
?generate_freq
?generate_freq
load_all()
test
?periodogram
lam <- function(x, y, m) {(x^2 + y) * ifelse(m == "A", 2, 1)}
ppp <- rmpoispp(lambda = lam, win = square(10), types = c("A","B"))
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.45)
insidefun = function(x) x+2
outfun = function(x, in = insidefun){x+in(5)}
?apply
apply
?match.fun(
)
outfun = function(x, in = insidefun){
outfun = function(x, in = insidefun){
outfun = function(x, in){
in
outfun = function(x, ins){
in.fun = match.fun(ins)
x + in.fun(5)}
insidefun
outfun(7,ins = insidefun)
match.fun(insidefun)
insidefun
outfun = function(x, ins){
x + ins(5)}
outfun(7,ins = insidefun)
?foreach
load_all()
?periodogram
library(spatstat)
lam <- function(x, y, m) {(x^2 + y) * ifelse(m == "A", 2, 1)}
ppp <- rmpoispp(lambda = lam, win = square(10), types = c("A","B"))
periodogram(i = "A", j = "B", ppp, inten.formula = "~ x + y")
periodogram(i = "A", j = "B", ppp, inten.formula = "~ 1")
periodogram_smooth(ppp, inten.formula = "~ 1", bandwidth = 0.45)
periodogram_smooth(ppp, inten.formula = "~ 1", bandwidth = 0.45)
load_all()
periodogram_smooth(ppp, inten.formula = "~ 1", bandwidth = 0.45)
?importFrom
?periodogram
load_all()
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.45)
ls()
use_package("dplyr", min_version = T)
warnings(())
warnings()
use_package("cowplot", min_version = T)
use_package("ggplot2", min_version = T)
use_package("doParallel", min_version = T)
use_package("foreach", min_version = T)
search()
?periodogram
load_all()
?periodogram
library(spatstat)
lam <- function(x, y, m) {(x^2 + y) * ifelse(m == "A", 2, 1)}
ppp <- rmpoispp(lambda = lam, win = square(10), types = c("A","B"))
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.45)
load_all()
ppp
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.45)
library(spatstat)
lam <- function(x, y, m) {(x^2 + y) * ifelse(m == "A", 2, 1)}
ppp <- rmpoispp(lambda = lam, win = square(10), types = c("A","B"))
load_all()
library(spatstat)
lam <- function(x, y, m) {(x^2 + y) * ifelse(m == "A", 2, 1)}
ppp <- rmpoispp(lambda = lam, win = square(10), types = c("A","B"))
periodogram(i = "A", j = "B", ppp, inten.formula = "~ x + y")
periodogram(i = "A", j = "B", ppp, inten.formula = "~ x + y")
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.45)
?foreach
load_all()
ppp
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.45)
load_all()
periodogram
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.45)
?parent.frame()
parent.frame()
load_all()
periodogram
periodogram(i = "A", j = "B", ppp, inten.formula = "~ x + y")
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.45)
load_all()
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.45)
load_all()
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.45)
load_all()
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.45)
load_all()
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.45)
load_all()
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.45)
load_all()
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.45)
load_all()
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.45)
load_all()
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.6)
load_all()
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.6)
load_all()
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.6)
load_all()
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.6)
load_all()
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.6)
load_all()
periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 0.6)
load_all()
?periodogram_smooth
?nzchar
Sys.getenv("_R_CHECK_LIMIT_CORES_", "")
?Sys.getenv
load_all()
?select_band
?scale_fill_distiller
?ggploy
?ggplot
?geom_point
load_all()
?plot_period
ppp
library(spatstat)
lam <- function(x, y, m) {(x^2 + y) * ifelse(m == "A", 2, 1)}
ppp <- rmpoispp(lambda = lam, win = square(5), types = c("A","B"))
period.list <- periodogram_smooth(ppp, inten.formula = "~ x + y", bandwidth = 1.2)
names(period.list)
load_all()
?plot_pairs
?.data
?get
?aes
spatstat::marks
spatstat::marks()
spatstat::spatstat.family()
spatstat::plot.foo()
?spatstat::plot.foo()
spatstat::beginner()
spatstat::latest.news()
spatstat::print.bugtable()
?spatstat::print.bugtable()
?spatstat::`spatstat-package`
spatstat::`spatstat-package`
?spatstat::spatstat
spatstat::spatstat
spatstat::beginner()
?while
()
while(FALSE){1+1}
while(T){1+1}
while(T){print(1)}
while(F){print(1)}
spatstat::spatstat.family()
?periodogram
load_all()
?select_band
?fspp
??fspp
load_all()
?periodogram_smooth
load_all()
?periodogram_smooth
library(devtools)
load_all()
usethis::create_github_token()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
where git
getwd()
smoother
test = T
ifelse(test, rep(3,2), c(10/5,1)*2)
coherence
?split.ppp
?coords.ppp
?area
2*
3
2*
3/
6
5*
3/
15
stopifnot("A"=is.null(NULL))
stopifnot("A"=!is.null(NULL))
?stopifnot
test = function(ppp) stopifnot("Please specify the point pattern in `ppp`." = !is.null(ppp))
test()
test(NULL)
test = function(a, ppp) cat(a)
test(a=2)
test()
usethis::use_git_config(user.name = "qwding101", user.email = "r07227101@ntu.edu.tw")
usethis::git_default_branch_configure()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
usethis::create_github_token()
gitcreds::gitcreds_set()
credentials::set_github_pat()
?use_github()
usethis::use_github()
library(usethis)
?use_build_ignore
use_build_ignore(".*\[\._].*", escape = TRUE)
use_build_ignore(".*\\[\._].*", escape = TRUE)
use_build_ignore(".*\\[\\._].*", escape = TRUE)
devtools::check()
devtools::check()
devtools::check()
usethis::edit_r_environ()
devtools::check()
gitcreds::gitcreds_get()
gitcreds::gitcreds_set()
